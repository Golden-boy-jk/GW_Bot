import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import CHAT_ID_GENERAL, CHAT_ID_COURIER
from my_token import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RequestPass(StatesGroup):
    organization = State()
    full_name = State()
    phone = State()
    department = State()
    position = State()

class CourierRequest(StatesGroup):
    from_address = State()
    sender_info = State()
    to_address = State()
    recipient_info = State()
    item_description = State()
    deadline = State()
    comment = State()
    attachments = State()

class CourierServiceRequest(StatesGroup):
    service_type = State()
    recipient_name = State()
    recipient_address = State()
    recipient_phone = State()
    item_description = State()
    deadline = State()
    comment = State()
    sender_name = State()
    sender_address = State()
    sender_phone = State()

class MeetingRequest(StatesGroup):
    date = State()
    time = State()
    details = State()

class StationeryRequest(StatesGroup):
    urgency = State()
    item_list = State()

class ProblemReport(StatesGroup):
    problem_type = State()
    description = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True
)

# main_menu = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫", callback_data="request_pass")],
#         [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞", callback_data="office_courier")],
#         [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)", callback_data="courier_service")],
#         [InlineKeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥", callback_data="meet_guest")],
#         [InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏", callback_data="stationery_order")],
#         [InlineKeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_problem")],
#     ]
# )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    if username:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await message.answer(greeting, reply_markup=main_menu)

# –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫
@dp.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")
async def request_pass(message: types.Message, state: FSMContext):
    await state.set_state(RequestPass.organization)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")

@dp.message(RequestPass.organization)
async def process_organization(message: types.Message, state: FSMContext):
    await state.update_data(organization=message.text)
    await state.set_state(RequestPass.full_name)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")

@dp.message(RequestPass.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(RequestPass.phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ +7:")

@dp.message(RequestPass.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(RequestPass.department)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:")

@dp.message(RequestPass.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await state.set_state(RequestPass.position)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")

@dp.message(RequestPass.position)
async def process_position(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = (f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data['organization']}\n"
            f"–§–ò–û: {data['full_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: +7{data['phone']}\n"
            f"–û—Ç–¥–µ–ª: {data['department']}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.username}")
    await bot.send_message(CHAT_ID_GENERAL, text)
    await message.answer("–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: 1-2 –¥–Ω—è.\n"
                         "–ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –≤ –æ—Ñ–∏—Å–µ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ú–∏–ª–ª–∏–æ–Ω–Ω–∞—è, –¥.6\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    await state.clear()

# –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
@dp.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")
async def courier_request(message: types.Message, state: FSMContext):
    await state.set_state(CourierRequest.from_address)
    await message.answer("–ó–∞—è–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –∑–∞ 1 –¥–µ–Ω—å –∏ –±–æ–ª–µ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ü–ë –∏ –±–ª–∏–∂–∞–π—à–µ–π –æ–±–ª–∞—Å—Ç–∏. "
                         "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                         "–ê–¥—Ä–µ—Å (–æ—Ç–∫—É–¥–∞):")

@dp.message(CourierRequest.from_address)
async def process_from_address(message: types.Message, state: FSMContext):
    await state.update_data(from_address=message.text)
    await state.set_state(CourierRequest.sender_info)
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(CourierRequest.sender_info)
async def process_sender_info(message: types.Message, state: FSMContext):
    await state.update_data(sender_info=message.text)
    await state.set_state(CourierRequest.to_address)
    await message.answer("–ö—É–¥–∞ (–∞–¥—Ä–µ—Å):")

@dp.message(CourierRequest.to_address)
async def process_to_address(message: types.Message, state: FSMContext):
    await state.update_data(to_address=message.text)
    await state.set_state(CourierRequest.recipient_info)
    await message.answer("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(CourierRequest.recipient_info)
async def process_recipient_info(message: types.Message, state: FSMContext):
    await state.update_data(recipient_info=message.text)
    await state.set_state(CourierRequest.item_description)
    await message.answer("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –≥—Ä—É–∑):")

@dp.message(CourierRequest.item_description)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await state.set_state(CourierRequest.deadline)
    await message.answer("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message(CourierRequest.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(CourierRequest.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –∏ —Ç.–¥.):")

@dp.message(CourierRequest.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(CourierRequest.attachments)
    await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–¥–æ–∫—É–º–µ–Ω—Ç—ã?")

@dp.message(CourierRequest.attachments)
async def process_attachments(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = (f"üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞\n"
            f"–û—Ç–∫—É–¥–∞: {data['from_address']}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['sender_info']}\n"
            f"–ö—É–¥–∞: {data['to_address']}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['recipient_info']}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç—ã/–ì—Ä—É–∑: {data['item_description']}\n"
            f"–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['deadline']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.username}")
    await bot.send_message(chat_id=CHAT_ID_COURIER, text="–í–∞—à —Ç–µ–∫—Å—Ç")
    await message.answer("–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    await state.clear()

# –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É
@dp.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")
async def courier_service_request(message: types.Message, state: FSMContext):
    await state.set_state(CourierServiceRequest.service_type)
    await message.answer("–¢–∏–ø –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ: –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –ú—ã –ø–æ–ª—É—á–∞–µ–º")

@dp.message(CourierServiceRequest.service_type)
async def process_service_type(message: types.Message, state: FSMContext):
    await state.update_data(service_type=message.text)
    if message.text == "–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º":
        await state.set_state(CourierServiceRequest.recipient_name)
        await message.answer("–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    elif message.text == "–ú—ã –ø–æ–ª—É—á–∞–µ–º":
        await state.set_state(CourierServiceRequest.sender_name)
        await message.answer("–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
