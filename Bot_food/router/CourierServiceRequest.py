from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram import Router, types

router = Router()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)

courier_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")],
        [KeyboardButton(text="–ú—ã –ø–æ–ª—É—á–∞–µ–º")],
    ],
    resize_keyboard=True,
)

confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request"
            ),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_request"),
        ]
    ]
)


class CourierServiceRequest(StatesGroup):
    service_type = State()
    recipient_name = State()
    recipient_address = State()
    recipient_phone = State()
    item_description = State()
    deadline = State()
    comment = State()
    sender_name = State()
    sender_address = State()
    sender_phone = State()
    document_name = State()
    spb_recipient = State()
    attachments = State()


@router.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")
async def courier_service_request(message: types.Message, state: FSMContext):
    await state.set_state(CourierServiceRequest.service_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã:", reply_markup=courier_keyboard
    )


@router.message(CourierServiceRequest.service_type)
async def process_courier_choice(message: types.Message, state: FSMContext):
    choice = "–æ—Ç–ø—Ä–∞–≤–∫–∞" if message.text == "–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" else "–ø–æ–ª—É—á–µ–Ω–∏–µ"
    await state.update_data(service_type=choice)

    await state.set_state(CourierServiceRequest.recipient_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
        if choice == "–æ—Ç–ø—Ä–∞–≤–∫–∞"
        else "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(CourierServiceRequest.recipient_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(recipient_name=message.text)
    await state.set_state(CourierServiceRequest.recipient_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")


@router.message(CourierServiceRequest.recipient_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(recipient_address=message.text)
    await state.set_state(CourierServiceRequest.recipient_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")


@router.message(CourierServiceRequest.recipient_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(recipient_phone=message.text)
    await state.set_state(CourierServiceRequest.document_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")


@router.message(CourierServiceRequest.document_name)
async def process_docs(message: types.Message, state: FSMContext):
    await state.update_data(document_name=message.text)
    await state.set_state(CourierServiceRequest.item_description)
    await message.answer("–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è?")


@router.message(CourierServiceRequest.item_description)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await state.set_state(CourierServiceRequest.deadline)
    await message.answer("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:")


@router.message(CourierServiceRequest.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(CourierServiceRequest.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")


@router.message(CourierServiceRequest.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(CourierServiceRequest.spb_recipient)
    await message.answer("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –°–ü–ë (–§–ò–û, –∞–¥—Ä–µ—Å):")


@router.callback_query(lambda c: c.data in ["confirm_request", "cancel_request"])
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm_request":
        data = await state.get_data()
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu
        )
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)

    await state.clear()
    await callback.answer()


@router.message(CourierServiceRequest.spb_recipient)
async def process_spb_recipient(message: types.Message, state: FSMContext):
    await state.update_data(spb_recipient=message.text)
    data = await state.get_data()

    summary = (
        f"üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É\n"
        f"–¢–∏–ø: {data.get('service_type')}\n"
        f"–ò–º—è: {data.get('recipient_name')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('recipient_address')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('recipient_phone')}\n"
        f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {data.get('document_name')}\n"
        f"–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è: {data.get('item_description')}\n"
        f"–°—Ä–æ–∫: {data.get('deadline')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –°–ü–ë: {data.get('spb_recipient')}"
    )

    await message.answer(summary, reply_markup=confirm_keyboard, parse_mode="Markdown")
