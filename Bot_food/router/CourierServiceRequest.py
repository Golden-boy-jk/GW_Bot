import logging
from enum import Enum
from datetime import datetime

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from Bot_food.config import CHAT_ID_OFFICE_COURIER, CHAT_ID_KSE

router = Router()


main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)

courier_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")],
        [KeyboardButton(text="–ú—ã –ø–æ–ª—É—á–∞–µ–º")],
    ],
    resize_keyboard=True,
)


class Callbacks(str, Enum):
    CONFIRM = "confirm_request"
    CANCEL = "cancel_request"


confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=Callbacks.CONFIRM
            ),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=Callbacks.CANCEL),
        ]
    ]
)


class CourierServiceRequest(StatesGroup):
    service_type = State()
    recipient_name = State()
    recipient_address = State()
    recipient_phone = State()
    document_name = State()
    item_description = State()
    deadline = State()
    comment = State()
    spb_recipient = State()


def escape_md_v2(text: str) -> str:
    escape_chars = r"_*\[\]()~`>#+\-=|{}.!\\"
    return "".join(f"\\{c}" if c in escape_chars else c for c in text or "-")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---


@router.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")
async def courier_service_request(message: types.Message, state: FSMContext):
    await state.set_state(CourierServiceRequest.service_type)
    await message.answer(
        "–í–Ω–∏–º–∞–Ω–∏–µ! –û–¥–Ω–∞ –∏–∑ —Ç–æ—á–µ–∫ (–∑–∞–±–æ—Ä/–æ—Ç–ø—Ä–∞–≤–∫–∞) "
        "‚Äì –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –æ—Ñ–∏—Å –≤ –°–ü–± (—É–ª. –ú–∏–ª–ª–∏–æ–Ω–Ω–∞—è, –¥.6)."
        " –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ—Ñ–∏—Å –°–ü–± ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ú—ã –ø–æ–ª—É—á–∞–µ–º¬ª "
        "–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."
        " –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–æ–≥–æ –æ—Ñ–∏—Å–∞ ‚Äì "
        "–≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º¬ª", reply_markup=courier_keyboard
    )


@router.message(CourierServiceRequest.service_type)
async def process_courier_choice(message: types.Message, state: FSMContext):
    choice = "–æ—Ç–ø—Ä–∞–≤–∫–∞" if message.text == "–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" else "–ø–æ–ª—É—á–µ–Ω–∏–µ"
    await state.update_data(service_type=choice)
    await state.set_state(CourierServiceRequest.recipient_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
        if choice == "–æ—Ç–ø—Ä–∞–≤–∫–∞"
        else "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(CourierServiceRequest.recipient_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(recipient_name=message.text)
    await state.set_state(CourierServiceRequest.recipient_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")


@router.message(CourierServiceRequest.recipient_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(recipient_address=message.text)
    await state.set_state(CourierServiceRequest.recipient_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")


@router.message(CourierServiceRequest.recipient_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(recipient_phone=message.text)
    await state.set_state(CourierServiceRequest.document_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")


@router.message(CourierServiceRequest.document_name)
async def process_docs(message: types.Message, state: FSMContext):
    await state.update_data(document_name=message.text)
    await state.set_state(CourierServiceRequest.item_description)
    await message.answer("–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è?")


@router.message(CourierServiceRequest.item_description)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await state.set_state(CourierServiceRequest.deadline)
    await message.answer("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:")


@router.message(CourierServiceRequest.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(CourierServiceRequest.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")


@router.message(CourierServiceRequest.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(CourierServiceRequest.spb_recipient)
    await message.answer("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –°–ü–ë (–§–ò–û, –∞–¥—Ä–µ—Å):")


@router.message(CourierServiceRequest.spb_recipient)
async def process_spb_recipient(message: types.Message, state: FSMContext):
    await state.update_data(spb_recipient=message.text)
    data = await state.get_data()

    summary_text = (
        f"*üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É*\n"
        f"*–¢–∏–ø:* {escape_md_v2(data.get('service_type'))}\n"
        f"*–ò–º—è:* {escape_md_v2(data.get('recipient_name'))}\n"
        f"*–ê–¥—Ä–µ—Å:* {escape_md_v2(data.get('recipient_address'))}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {escape_md_v2(data.get('recipient_phone'))}\n"
        f"*–î–æ–∫—É–º–µ–Ω—Ç—ã:* {escape_md_v2(data.get('document_name'))}\n"
        f"*–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è:* {escape_md_v2(data.get('item_description'))}\n"
        f"*–°—Ä–æ–∫:* {escape_md_v2(data.get('deadline'))}\n"
        f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {escape_md_v2(data.get('comment'))}\n"
        f"*–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –°–ü–ë:* {escape_md_v2(data.get('spb_recipient'))}"
    )

    await state.update_data(summary_text=summary_text)
    await message.answer(
        summary_text, reply_markup=confirm_keyboard, parse_mode="MarkdownV2"
    )


@router.callback_query(lambda c: c.data in [Callbacks.CONFIRM, Callbacks.CANCEL])
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == Callbacks.CONFIRM:
        await handle_kse_request_submission(callback, state)
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
        await state.clear()
        await callback.answer()


async def handle_kse_request_submission(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = callback.from_user

    service_type = data.get("service_type", "").lower()
    if service_type in ["–æ—Ç–ø—Ä–∞–≤–∫–∞", "–ø–æ–ª—É—á–µ–Ω–∏–µ"]:
        chat_id = CHAT_ID_KSE
    else:
        chat_id = CHAT_ID_OFFICE_COURIER

    try:
        user_info = (
            f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
            f"‚Ä¢ –ò–º—è: {escape_md_v2(user.full_name)}\n"
            f"‚Ä¢ Username: {escape_md_v2(f'@{user.username}') if user.username else '‚Äî'}\n"
            f"‚Ä¢ ID: `{user.id}`\n\n"
        )
        summary_text = data.get("summary_text", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        full_text = (
            f"{user_info}"
            f"{summary_text}\n\n"
            f"üïí *–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞:* {escape_md_v2(timestamp)}"
        )

        await callback.bot.send_message(chat_id, full_text, parse_mode="MarkdownV2")
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}", reply_markup=main_menu
        )

    await state.clear()
    await callback.answer()
