from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router

from config import CHAT_ID_GENERAL  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å

router = Router()


class RequestPass(StatesGroup):
    organization = State()
    full_name = State()
    phone = State()
    department = State()
    position = State()


main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    username = message.from_user.username
    greeting = (
        f"–ü—Ä–∏–≤–µ—Ç, {username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        if username
        else "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(greeting, reply_markup=main_menu)


@router.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")
async def request_pass(message: types.Message, state: FSMContext):
    await state.set_state(RequestPass.organization)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")


@router.message(RequestPass.organization)
async def process_organization(message: types.Message, state: FSMContext):
    await state.update_data(organization=message.text)
    await state.set_state(RequestPass.full_name)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")


@router.message(RequestPass.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(RequestPass.phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ +7:")


@router.message(RequestPass.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(RequestPass.department)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:")


@router.message(RequestPass.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await state.set_state(RequestPass.position)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")


@router.message(RequestPass.position)
async def process_position(message: types.Message, state: FSMContext):
    data = await state.get_data()

    text = (
        f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data['organization']}\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: +7{data['phone']}\n"
        f"–û—Ç–¥–µ–ª: {data['department']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.username}"
    )

    try:
        await message.bot.send_message(
            CHAT_ID_GENERAL, text
        )  # üëà –í–æ—Ç —Ç—É—Ç –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
        await message.answer(
            "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: 1‚Äì2 –¥–Ω—è.\n"
            "–ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –≤ –æ—Ñ–∏—Å–µ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ú–∏–ª–ª–∏–æ–Ω–Ω–∞—è, –¥.6\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {CHAT_ID_GENERAL}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()
