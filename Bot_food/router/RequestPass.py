from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from datetime import datetime
from Bot_food.config import CHAT_ID_GENERAL
import logging

router = Router()

logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RequestPass(StatesGroup):
    organization = State()
    full_name = State()
    phone = State()
    department = State()
    position = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    username = message.from_user.username
    greeting = (
        f"–ü—Ä–∏–≤–µ—Ç, {username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        if username
        else "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(greeting, reply_markup=main_menu)


@router.message(Command("getid"))
async def get_chat_id(message: types.Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")


@router.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")
async def request_pass(message: types.Message, state: FSMContext):
    await state.set_state(RequestPass.organization)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:")


@router.message(RequestPass.organization)
async def process_organization(message: types.Message, state: FSMContext):
    await state.update_data(organization=message.text)
    await state.set_state(RequestPass.full_name)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")


@router.message(RequestPass.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(RequestPass.phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ +7:")


@router.message(RequestPass.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(RequestPass.department)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:")


@router.message(RequestPass.department)
async def process_department(message: types.Message, state: FSMContext):
    await state.update_data(department=message.text)
    await state.set_state(RequestPass.position)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")


@router.message(RequestPass.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    data = await state.get_data()

    user = message.from_user
    username = user.username or f"{user.first_name} {user.last_name}".strip()
    if not username:
        username = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_info = f"@{username} (ID: {user.id})"

    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")

    text = (
        f"üìã *–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫*\n"
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_info}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data['organization']}\n"
        f"üìù –§–ò–û: {data['full_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7{data['phone']}\n"
        f"üìÇ –û—Ç–¥–µ–ª: {data['department']}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üïí *–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:* {timestamp}"
    )

    try:
        await message.bot.send_message(
            CHAT_ID_GENERAL, text, parse_mode="Markdown", disable_web_page_preview=True
        )
        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            "‚è≥ –°—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: *1‚Äì2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è*\n"
            "üìç –ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –≤ –æ—Ñ–∏—Å–µ –ø–æ –∞–¥—Ä–µ—Å—É: *—É–ª. –ú–∏–ª–ª–∏–æ–Ω–Ω–∞—è, –¥.6*\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            parse_mode="Markdown",
            reply_markup=main_menu,
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫: {e}")
        await message.answer(
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.clear()
