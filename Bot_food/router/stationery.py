from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message,
)


def order_type_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°—Ä–æ—á–Ω–æ", callback_data="order_type_urgent"),
                InlineKeyboardButton(
                    text="–ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="order_type_regular"
                ),
            ]
        ]
    )
    return keyboard


router = Router()


class OrderStationeryStates(StatesGroup):
    waiting_for_items = State()


@router.message(lambda message: message.text.lower() == "–∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")
async def order_stationery(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:", reply_markup=order_type_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
@router.callback_query(
    lambda callback: callback.data == "order_type_urgent"
    or callback.data == "order_type_regular"
)
async def handle_order_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ó–∞–∫–∞–∑ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é –ö–æ–º—É—Å.\n"
        "–í—Å—Ç–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:"
    )
    await state.set_state(OrderStationeryStates.waiting_for_items)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞/–ø–µ—Ä–µ—á–Ω—è —Ç–æ–≤–∞—Ä–æ–≤
@router.message(OrderStationeryStates.waiting_for_items)
async def receive_items(message: Message, state: FSMContext):
    # –¢—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å message.text –≤ –±–∞–∑—É –∏–ª–∏ –ª–æ–≥
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä")
    await state.clear()
