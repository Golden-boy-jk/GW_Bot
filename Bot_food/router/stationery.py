import re
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from Bot_food.config import CHAT_ID_GENERAL
import logging
from datetime import datetime

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
return_main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)

# Callback –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ORDER_URGENT = "order_type_urgent"
ORDER_REGULAR = "order_type_regular"


# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def escape_md(text: str) -> str:
    return re.sub(r"([_*\[\]()~`>#+\-=|{}.!\\])", r"\\\1", text)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStationeryStates(StatesGroup):
    order_type = State()
    waiting_for_items = State()
    confirmation = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def order_type_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°—Ä–æ—á–Ω–æ", callback_data=ORDER_URGENT),
                InlineKeyboardButton(
                    text="–ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data=ORDER_REGULAR
                ),
            ]
        ]
    )


def confirmation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order"
                ),
            ]
        ]
    )


# –°—Ç–∞—Ä—Ç –∑–∞–∫–∞–∑–∞
@router.message(lambda message: message.text.lower() == "–∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")
async def order_stationery(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:", reply_markup=order_type_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
@router.callback_query(lambda c: c.data in [ORDER_URGENT, ORDER_REGULAR])
async def handle_order_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(order_type=callback.data)
    await callback.message.edit_text(
        "–ó–∞–∫–∞–∑ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é –ö–æ–º—É—Å.\n"
        "–í—Å—Ç–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:"
    )
    await state.set_state(OrderStationeryStates.waiting_for_items)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(OrderStationeryStates.waiting_for_items)
async def receive_items(message: Message, state: FSMContext):
    await state.update_data(items=message.text)

    user_data = await state.get_data()
    order_type = user_data.get("order_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
    items = escape_md(user_data.get("items", ""))

    user = message.from_user
    username = user.username
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    user_id = user.id

    user_info = f"@{username}" if username else f"{first_name} {last_name}".strip()
    if not user_info:
        user_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_info += f" \\(ID: {user_id}\\)"
    user_info = escape_md(user_info)

    summary = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏*\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_info}\n"
        f"*–¢–∏–ø –∑–∞–∫–∞–∑–∞:* {'–°—Ä–æ—á–Ω—ã–π' if order_type == ORDER_URGENT else '–û–±—ã—á–Ω—ã–π'}\n"
        f"*–¢–æ–≤–∞—Ä—ã:* {items}"
    )

    await message.answer(summary, parse_mode="MarkdownV2")
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=confirmation_keyboard()
    )
    await state.set_state(OrderStationeryStates.confirmation)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
@router.callback_query(lambda c: c.data in ["confirm_order", "cancel_order"])
async def handle_order_confirmation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user = callback.from_user

    data = await state.get_data()
    order_type = data.get("order_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
    items = escape_md(data.get("items", ""))

    username = user.username
    first_name = user.first_name or ""
    last_name = user.last_name or ""

    user_info = f"@{username}" if username else f"{first_name} {last_name}".strip()
    if not user_info:
        user_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_info += f" \\(ID: {user_id}\\)"
    user_info = escape_md(user_info)

    timestamp = escape_md(datetime.now().strftime("%d.%m.%Y %H:%M"))

    log_text = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏*\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_info}\n"
        f"*–¢–∏–ø –∑–∞–∫–∞–∑–∞:* {'–°—Ä–æ—á–Ω—ã–π' if order_type == ORDER_URGENT else '–û–±—ã—á–Ω—ã–π'}\n"
        f"*–¢–æ–≤–∞—Ä—ã:* {items}\n\n"
        f"üïí *–ó–∞–∫–∞–∑ –ø–æ–¥–∞–Ω:* {timestamp}"
    )

    if callback.data == "confirm_order":
        try:
            await callback.bot.send_message(
                CHAT_ID_GENERAL,
                log_text,
                parse_mode="MarkdownV2",
                disable_web_page_preview=True,
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")
            await callback.message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=return_main_menu
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.message.answer(
                f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", reply_markup=return_main_menu
            )
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")
        await callback.message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=return_main_menu
        )

    await state.clear()
