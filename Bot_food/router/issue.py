from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Bot_food.config import CHAT_ID_GENERAL

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
problem_type_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–ª–æ–º–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É, –ø–æ—á–∏–Ω–∏—Ç—å —Å—Ç—É–ª –∏ —Ç.–¥.)",
                callback_data="problem_breakdown"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–¥–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–Ω–∞—É—à–Ω–∏–∫–∏, –º—ã—à—å, –∑–∞—Ä—è–¥–∫–∞ –∏ —Ç.–¥.)",
                callback_data="problem_replacement"
            )
        ]
    ]
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ProblemRequest(StatesGroup):
    problem_type = State()
    problem_description = State()


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
def format_problem_report(data: dict, user: types.User) -> str:
    problem_type = (
        "–ü–æ–ª–æ–º–∫–∞"
        if data["problem_type"] == "problem_breakdown"
        else "–ü–æ–¥–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
    )
    return (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É!\n\n"
        f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['problem_description']}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"User ID: {user.id}"
    )


# –ö–æ–º–∞–Ω–¥–∞: –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
@router.message(lambda msg: msg.text and msg.text.lower() == "—Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")
async def problem_request(message: types.Message, state: FSMContext):
    await state.set_state(ProblemRequest.problem_type)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=problem_type_keyboard
    )


# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
@router.callback_query(lambda c: c.data in ["problem_breakdown", "problem_replacement"])
async def handle_problem_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(problem_type=callback.data)
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:")
    await state.set_state(ProblemRequest.problem_description)
    await callback.answer()


# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@router.message(ProblemRequest.problem_description)
async def handle_problem_description(message: types.Message, state: FSMContext):
    await state.update_data(problem_description=message.text)
    data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    try:
        await message.bot.send_message(
            CHAT_ID_GENERAL, format_problem_report(data, message.from_user)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    problem_type = (
        "–ü–æ–ª–æ–º–∫–∞"
        if data["problem_type"] == "problem_breakdown"
        else "–ü–æ–¥–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
    )
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['problem_description']}\n"
        f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû"
    )

    await state.clear()
