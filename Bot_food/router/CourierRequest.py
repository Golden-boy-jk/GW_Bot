import logging
import re
import os
import tempfile
from enum import Enum
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, Message, ReplyKeyboardMarkup,
    KeyboardButton, PhotoSize
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from Bot_food.config import CHAT_ID_OFFICE_COURIER  # int

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ ---
router = Router()

# --- FSM: —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–∫–∏ ---
class CourierRequest(StatesGroup):
    from_address = State()
    sender_info = State()
    to_address = State()
    recipient_info = State()
    item_description = State()
    deadline = State()
    comment = State()
    attachment = State()
    confirmation = State()

# --- Enum –¥–ª—è callback_data ---
class Callbacks(str, Enum):
    CONFIRM = "confirm_request"
    CANCEL = "cancel_request"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
attach_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìé –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª"), KeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=Callbacks.CONFIRM.value),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=Callbacks.CANCEL.value),
        ]
    ]
)

# --- –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2 ---
def escape_md_v2(text: str) -> str:
    if not text:
        return "-"
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid ---
@router.message(Command("chatid"))
async def chat_id_handler(message: Message):
    await message.answer(f"–≠—Ç–æ—Ç —á–∞—Ç –∏–º–µ–µ—Ç ID: `{message.chat.id}`", parse_mode="Markdown")

# --- –°—Ç–∞—Ä—Ç –∑–∞—è–≤–∫–∏ ---
@router.message(F.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")
async def start_request(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    await state.set_state(CourierRequest.from_address)
    await state.update_data(user_id=message.from_user.id)
    await message.answer("–ó–∞—è–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –∑–∞ 1 –¥–µ–Ω—å –∏ –±–æ–ª–µ–µ, "
                         "–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ü–ë –∏ –±–ª–∏–∂–∞–π—à–µ–π –æ–±–ª–∞—Å—Ç–∏. "
                         "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ "
                         "–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:.\n\nüìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å):")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@router.message(CourierRequest.from_address)
async def process_from_address(message: Message, state: FSMContext):
    await state.update_data(from_address=message.text)
    await state.set_state(CourierRequest.sender_info)
    await message.answer("üì® –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")

@router.message(CourierRequest.sender_info)
async def process_sender_info(message: Message, state: FSMContext):
    await state.update_data(sender_info=message.text)
    await state.set_state(CourierRequest.to_address)
    await message.answer("üëú –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫—É–¥–∞):")

@router.message(CourierRequest.to_address)
async def process_to_address(message: Message, state: FSMContext):
    await state.update_data(to_address=message.text)
    await state.set_state(CourierRequest.recipient_info)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")

@router.message(CourierRequest.recipient_info)
async def process_recipient_info(message: Message, state: FSMContext):
    await state.update_data(recipient_info=message.text)
    await state.set_state(CourierRequest.item_description)
    await message.answer("üì¶ –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?")

@router.message(CourierRequest.item_description)
async def process_item_description(message: Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await state.set_state(CourierRequest.deadline)
    await message.answer("‚èí –ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:")

@router.message(CourierRequest.deadline)
async def process_deadline(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(CourierRequest.comment)
    await message.answer("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –∏ —Ç.–¥.):")

@router.message(CourierRequest.comment)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(CourierRequest.attachment)
    await message.answer("üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª?", reply_markup=attach_keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π ---

@router.message(CourierRequest.attachment, F.document)
async def handle_document(message: Message, state: FSMContext):
    await state.update_data(file_id=message.document.file_id, file_type="document")
    await message.answer("üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.")
    await prepare_confirmation(message, state)

@router.message(CourierRequest.attachment, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    photo: PhotoSize = message.photo[-1]
    await state.update_data(file_id=photo.file_id, file_type="photo")
    await message.answer("üñº –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.")
    await prepare_confirmation(message, state)

@router.message(CourierRequest.attachment, F.text.in_(["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]))
async def skip_attachment(message: Message, state: FSMContext):
    await prepare_confirmation(message, state)

@router.message(CourierRequest.attachment, F.text.in_(["üìé –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª"]))
async def ask_for_attachment(message: Message):
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")

@router.message(CourierRequest.attachment)
async def invalid_attachment(message: Message):
    await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ---
async def download_file(bot, file_id) -> str:
    file = await bot.get_file(file_id)
    file_path = file.file_path
    suffix = os.path.splitext(file_path)[-1] or ""
    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    await bot.download_file(file_path, tmp_file.name)
    tmp_file.close()
    return tmp_file.name

# --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
async def prepare_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()

    def safe(key):
        return escape_md_v2(data.get(key, "-"))

    summary = (
        "ü§ñ *BotCorp CourierBot*\n"
        "üì¶ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞*\n"
        f"üìç *–û—Ç–∫—É–¥–∞:* {safe('from_address')}\n"
        f"üì® *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {safe('sender_info')}\n"
        f"üëú *–ö—É–¥–∞:* {safe('to_address')}\n"
        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {safe('recipient_info')}\n"
        f"üì¶ *–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:* {safe('item_description')}\n"
        f"‚èí *–°—Ä–æ–∫:* {safe('deadline')}\n"
        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {safe('comment')}\n"
    )

    logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n%s", summary)
    await state.update_data(summary_text=summary)
    await state.set_state(CourierRequest.confirmation)
    await message.answer(summary, reply_markup=confirm_keyboard, parse_mode="MarkdownV2")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@router.callback_query(F.data == Callbacks.CONFIRM.value)
async def confirm_request(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç {CHAT_ID_OFFICE_COURIER}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        await callback.bot.send_message(
            CHAT_ID_OFFICE_COURIER,
            data.get("summary_text", "-"),
            parse_mode="MarkdownV2"
        )

        file_id = data.get("file_id")
        file_type = data.get("file_type")

        if file_id and file_type in ("document", "photo"):
            local_path = await download_file(callback.bot, file_id)
            caption = "üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ"

            try:
                with open(local_path, "rb") as f:
                    if file_type == "document":
                        await callback.bot.send_document(
                            CHAT_ID_OFFICE_COURIER,
                            document=f,
                            caption=caption
                        )
                    elif file_type == "photo":
                        await callback.bot.send_photo(
                            CHAT_ID_OFFICE_COURIER,
                            photo=f,
                            caption=caption
                        )
            finally:
                os.remove(local_path)
        else:
            logger.warning("–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await state.clear()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
        await callback.message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã ---
@router.callback_query(F.data == Callbacks.CANCEL.value)
async def cancel_request(callback: CallbackQuery, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
