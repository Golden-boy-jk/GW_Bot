from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request"
            ),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_request"),
        ]
    ]
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CourierRequest(StatesGroup):
    from_address = State()
    sender_info = State()
    to_address = State()
    recipient_info = State()
    item_description = State()
    deadline = State()
    comment = State()
    attachment = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–∫–∏
@router.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")
async def courier_request(message: types.Message, state: FSMContext):
    await state.set_state(CourierRequest.from_address)
    await message.answer(
        "–ó–∞—è–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è –∑–∞ 1 –¥–µ–Ω—å –∏ –±–æ–ª–µ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ü–ë –∏ –±–ª–∏–∂–∞–π—à–µ–π –æ–±–ª–∞—Å—Ç–∏.\n"
        "–ê–¥—Ä–µ—Å (–æ—Ç–∫—É–¥–∞):"
    )


@router.message(CourierRequest.from_address)
async def process_from_address(message: types.Message, state: FSMContext):
    await state.update_data(from_address=message.text)
    await state.set_state(CourierRequest.sender_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")


@router.message(CourierRequest.sender_info)
async def process_sender_info(message: types.Message, state: FSMContext):
    await state.update_data(sender_info=message.text)
    await state.set_state(CourierRequest.to_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å):")


@router.message(CourierRequest.to_address)
async def process_to_address(message: types.Message, state: FSMContext):
    await state.update_data(to_address=message.text)
    await state.set_state(CourierRequest.recipient_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")


@router.message(CourierRequest.recipient_info)
async def process_recipient_info(message: types.Message, state: FSMContext):
    await state.update_data(recipient_info=message.text)
    await state.set_state(CourierRequest.item_description)
    await message.answer("–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º? –û–ø–∏—à–∏—Ç–µ:")


@router.message(CourierRequest.item_description)
async def process_item_description(message: types.Message, state: FSMContext):
    await state.update_data(item_description=message.text)
    await state.set_state(CourierRequest.deadline)
    await message.answer("–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:")


@router.message(CourierRequest.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(CourierRequest.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")


@router.message(CourierRequest.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(CourierRequest.attachment)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç?\n"
        "üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_attachment"
                    )
                ]
            ]
        ),
    )


@router.message(CourierRequest.attachment)
async def process_attachment(message: types.Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    await state.update_data(attachment=file_id)
    await show_summary(message, state)


@router.callback_query(lambda c: c.data == "skip_attachment")
async def skip_attachment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(attachment=None)
    await callback.answer()
    await show_summary(callback.message, state)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞
@router.callback_query(lambda c: c.data in ["confirm_request", "cancel_request"])
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm_request":
        data = await state.get_data()
        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        # await bot.send_message(ADMIN_ID, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç)
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()
    await callback.answer()


# –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∑–∞—è–≤–∫–∏
async def show_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()

    summary = (
        "üì¶ **–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞**\n"
        f"**–û—Ç–∫—É–¥–∞:** {data['from_address']}\n"
        f"**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {data['sender_info']}\n"
        f"**–ö—É–¥–∞:** {data['to_address']}\n"
        f"**–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {data['recipient_info']}\n"
        f"**–ß—Ç–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å:** {data['item_description']}\n"
        f"**–°—Ä–æ–∫:** {data['deadline']}\n"
        f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {data['comment'] or '-'}"
    )

    await message.answer(summary, parse_mode="Markdown")

    if data.get("attachment"):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            await message.answer_document(data["attachment"])
        except Exception:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ.")

    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=confirm_keyboard)
