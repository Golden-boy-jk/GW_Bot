from aiogram import Router, types, F
from aiogram.types import Message
from Bot_food.config import ADMINS
from Bot_food.router.users.users_db import users_db, save_users
from Bot_food.router.keyboards import main_menu, admin_menu
from aiogram.fsm.context import FSMContext
import logging


router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º

    user_id = message.from_user.id
    username = message.from_user.username
    username_display = f"@{username}" if username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username"

    if user_id not in users_db:
        users_db.add(user_id)
        save_users(users_db)
        logger.info(
            f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id} ({username_display})"
        )
    else:
        logger.info(
            f"üìå –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username_display})"
        )

    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {username_display}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(greeting, reply_markup=main_menu)


def is_admin(user_id: int) -> bool:
    return user_id in ADMINS


@router.message(F.text == "/admin")
async def admin_only(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(
            "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu
        )
        return
    await message.answer(
        f"üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω {message.from_user.full_name}!", reply_markup=admin_menu
    )


@router.message(F.text == "/logout")
async def admin_logout(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –¢—ã –∏ —Ç–∞–∫ –Ω–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_menu)
        return
    await message.answer(
        "‚úÖ –¢—ã –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π /admin.",
        reply_markup=main_menu,
    )


@router.message(F.text == "/stats")
async def cmd_stats(message: Message):
    if message.from_user.id not in ADMINS:
        return
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users_db)}")


# –§–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_broadcast(bot, user_id: int, text: str) -> bool:
    try:
        await bot.send_message(user_id, text)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


@router.message(F.text.startswith("/broadcast"))
async def cmd_broadcast(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=main_menu
        )
        return

    text = message.text[len("/broadcast") :].strip()
    if not text:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast", reply_markup=admin_menu
        )
        return

    sent = 0
    for user_id in users_db:
        try:
            await message.bot.send_message(user_id, text)
            sent += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

    await message.answer(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_menu
    )
