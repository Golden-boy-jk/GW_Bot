from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from Bot_food.config import CHAT_ID_GENERAL
import logging
from datetime import datetime

router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
return_main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")],
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É (KSE)")],
        [KeyboardButton(text="–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")],
        [KeyboardButton(text="–ó–∞–∫–∞–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏")],
        [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")],
    ],
    resize_keyboard=True,
)


class MeetGuestRequest(StatesGroup):
    date = State()
    time = State()
    requirements = State()


@router.message(lambda message: message.text == "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è, –∫—É—Ä—å–µ—Ä–∞ –∏ —Ç–¥")
async def meet_guest(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –≥–æ—Å—Ç—è")
    await state.set_state(MeetGuestRequest.date)
    await message.answer(
        "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove()
    )


@router.message(MeetGuestRequest.date)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(MeetGuestRequest.time)
    await message.answer("‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (–ß–ß:–ú–ú):")


@router.message(MeetGuestRequest.time)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await state.set_state(MeetGuestRequest.requirements)
    await message.answer("üìå –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ:")


@router.message(MeetGuestRequest.requirements)
async def process_requirements(message: types.Message, state: FSMContext):
    await state.update_data(requirements=message.text)
    data = await state.get_data()

    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    created_at = datetime.now().strftime("%d.%m.%Y %H:%M")

    summary = (
        f"üìã *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –≥–æ—Å—Ç—è/–∫—É—Ä—å–µ—Ä–∞:*\n"
        f"üóì –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {data['time']}\n"
        f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['requirements']}\n\n"
        f"üïí –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_at}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(summary_text=summary)

    await message.answer(summary, parse_mode="Markdown")
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_meeting"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_meeting"
                    )
                ],
            ]
        ),
    )


@router.callback_query(lambda c: c.data in ["confirm_meeting", "cancel_meeting"])
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    data = await state.get_data()
    user = callback.from_user

    full_name = (
        user.full_name or (f"{user.first_name or ''} {user.last_name or ''}").strip()
    )
    if not full_name:
        full_name = "‚Äî"

    username = f"@{user.username}" if user.username else "‚Äî"
    user_id = user.id

    user_info = (
        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
        f"‚Ä¢ –ò–º—è: {full_name}\n"
        f"‚Ä¢ Username: {username}\n"
        f"‚Ä¢ ID: `{user_id}`\n\n"
    )

    if callback.data == "confirm_meeting":
        try:
            full_text = user_info + data.get("summary_text", "–ó–∞—è–≤–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            await callback.bot.send_message(
                CHAT_ID_GENERAL, full_text, parse_mode="Markdown"
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–∫—É –∏ –æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç"
            )
            await callback.message.answer(
                "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=return_main_menu
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É")
        await callback.message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=return_main_menu
        )

    await state.clear()
